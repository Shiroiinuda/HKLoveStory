//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""ChaseGame"",
            ""id"": ""37f44fd1-3032-47c0-8d89-dd5ddd9bbcac"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""ed034a7b-eee8-41e5-ae25-4a208765c079"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""021b45e7-9429-4cc4-a6e6-0c8c4f637ea6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0b71ade3-9a70-4813-ad75-d5ae9f9d268b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c8e9e92-1a91-4e60-812e-76d5818a2795"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ChaseGame
        m_ChaseGame = asset.FindActionMap("ChaseGame", throwIfNotFound: true);
        m_ChaseGame_Left = m_ChaseGame.FindAction("Left", throwIfNotFound: true);
        m_ChaseGame_Right = m_ChaseGame.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ChaseGame
    private readonly InputActionMap m_ChaseGame;
    private List<IChaseGameActions> m_ChaseGameActionsCallbackInterfaces = new List<IChaseGameActions>();
    private readonly InputAction m_ChaseGame_Left;
    private readonly InputAction m_ChaseGame_Right;
    public struct ChaseGameActions
    {
        private @PlayerInput m_Wrapper;
        public ChaseGameActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left => m_Wrapper.m_ChaseGame_Left;
        public InputAction @Right => m_Wrapper.m_ChaseGame_Right;
        public InputActionMap Get() { return m_Wrapper.m_ChaseGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChaseGameActions set) { return set.Get(); }
        public void AddCallbacks(IChaseGameActions instance)
        {
            if (instance == null || m_Wrapper.m_ChaseGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChaseGameActionsCallbackInterfaces.Add(instance);
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
        }

        private void UnregisterCallbacks(IChaseGameActions instance)
        {
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
        }

        public void RemoveCallbacks(IChaseGameActions instance)
        {
            if (m_Wrapper.m_ChaseGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChaseGameActions instance)
        {
            foreach (var item in m_Wrapper.m_ChaseGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChaseGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChaseGameActions @ChaseGame => new ChaseGameActions(this);
    public interface IChaseGameActions
    {
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
